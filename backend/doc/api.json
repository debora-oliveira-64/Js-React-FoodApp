{
  "openapi": "3.0.0",
  "info": {
    "title": "Restaurant Management API",
    "version": "1.0.0",
    "description": "API for managing restaurants, orders, users, and authentication"
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["Admin", "Restaurant", "Client"]
                }
              }
            }
          },
          "ifRestaurant": {
            "type": "string"
          }
        }
      },
      "Restaurant": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "category": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "Plate": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["meat", "fish", "vegan", "dessert"]
          },
          "dose": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["small", "medium", "large"]
                },
                "price": {
                  "type": "number"
                }
              }
            }
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "nutrionalValue": {
            "type": "string"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "plates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "restaurant": {
                  "type": "string"
                },
                "plate": {
                  "type": "string"
                },
                "dose": {
                  "type": "string"
                },
                "price": {
                  "type": "number"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": ["OnTheWay", "Delivered"]
          },
          "totalPrice": {
            "type": "number"
          }
        }
      }
    }
  },
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "500": {
            "description": "Registration failed"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "token=abcde12345; HttpOnly"
                }
              }
            }
          },
          "500": {
            "description": "Login failed"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "summary": "User logout",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful logout"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get current user information",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "202": {
            "description": "User information retrieved successfully"
          },
          "500": {
            "description": "Error retrieving user information"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully"
          },
          "404": {
            "description": "Error creating user"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get user by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update user by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/restaurants": {
      "get": {
        "summary": "Get all restaurants",
        "responses": {
          "200": {
            "description": "List of restaurants retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create a new restaurant",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Restaurant created successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/restaurants/{restaurantId}": {
      "get": {
        "summary": "Get restaurant by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "restaurantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restaurant retrieved successfully"
          },
          "404": {
            "description": "Restaurant not found"
          }
        }
      },
      "patch": {
        "summary": "Update restaurant by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "restaurantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Restaurant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Restaurant updated successfully"
          },
          "500": {
            "description": "Error updating restaurant"
          }
        }
      }
    },
    "/plates": {
      "get": {
        "summary": "Get all plates",
        "responses": {
          "200": {
            "description": "List of plates retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create a new plate",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plate created successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/plates/{plateId}": {
      "get": {
        "summary": "Get plate by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "plateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plate retrieved successfully"
          },
          "404": {
            "description": "Plate not found"
          }
        }
      },
      "patch": {
        "summary": "Update plate by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "plateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plate updated successfully"
          },
          "500": {
            "description": "Error updating plate"
          }
        }
      },
      "delete": {
        "summary": "Delete plate by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "plateId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plate deleted successfully"
          },
          "404": {
            "description": "Plate not found"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Get all orders",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders retrieved successfully"
          }
        }
      },
      "post": {
        "summary": "Create a new order",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created successfully"
          },
          "500": {
            "description": "Error creating order"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "summary": "Get order by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "patch": {
        "summary": "Update order by ID",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully"
          },
          "500": {
            "description": "Error updating order"
          }
        }
      }
    },
    "/orders/client/{userId}": {
      "get": {
        "summary": "Get orders by client",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "500": {
            "description": "Error retrieving orders"
          }
        }
      }
    },
    "/orders/restaurant/{restaurantId}": {
      "get": {
        "summary": "Get orders by restaurant",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "restaurantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "500": {
            "description": "Error retrieving orders"
          }
        }
      }
    },
    "/images/upload": {
      "post": {
        "summary": "Upload an image",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully"
          },
          "400": {
            "description": "No file uploaded"
          }
        }
      }
    },
    "/images/image/{imageName}": {
      "get": {
        "summary": "Get an image",
        "parameters": [
          {
            "in": "path",
            "name": "imageName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image retrieved successfully"
          },
          "404": {
            "description": "Image not found"
          }
        }
      }
    },
    "/email/send": {
      "get": {
        "summary": "Send password reset email",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "400": {
            "description": "Missing required parameter"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "An error occurred while processing your request"
          }
        }
      }
    }
  }
}
